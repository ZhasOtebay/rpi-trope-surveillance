#!/usr/bin/env python3
import subprocess
import logging
import time
import shutil
import signal
import sys

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
CAMERA_IP = "192.168.1.100"
CAMERA_USER = "admin"
CAMERA_PASSWORD = "B078AD7B"
RTSP_URL = f"rtsp://{CAMERA_USER}:{CAMERA_PASSWORD}@{CAMERA_IP}:554/main"

# –î–æ–º–µ–Ω –∏ RTMP
AWS_DOMAIN = "terradatalab.org"
FFMPEG_SERVER = f"rtmp://{AWS_DOMAIN}:1935/live/stream"

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
CAMERA_INTERFACE = "eth0"
AWS_INTERFACE = "wlan0"

# –õ—ë–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Pi)
FRAME_RATE = 10
RESOLUTION = "640x360"       # –ú–∞–ª–µ–Ω—å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ = –º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞
BITRATE = "400k"             # –ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç
PRESET = "ultrafast"         # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger("streamer")

# –î–ª—è graceful shutdown
running = True

def signal_handler(signum, frame):
    global running
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    running = False

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def check_network():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π DNS"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏...")

    # 1. –ö–∞–º–µ—Ä–∞
    try:
        result = subprocess.run(
            ["ping", "-c", "1", "-W", "5", "-I", CAMERA_INTERFACE, CAMERA_IP],
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=10
        )
        if result.returncode != 0:
            logger.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
        logger.info("‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –∫–∞–º–µ—Ä—ã: {e}")
        return False

    # 2. –î–æ–º–µ–Ω —á–µ—Ä–µ–∑ Wi-Fi
    try:
        result = subprocess.run(
            ["ping", "-c", "1", "-W", "5", "-I", AWS_INTERFACE, AWS_DOMAIN],
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=10
        )
        if result.returncode != 0:
            logger.error("‚ùå –î–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        logger.info("‚úÖ –î–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–∞: {e}")
        return False

    # 3. DNS —á–µ—Ä–µ–∑ Google
    try:
        result = subprocess.run(
            ["dig", "@8.8.8.8", AWS_DOMAIN, "+short", "+time=5"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0 and "34.228.167.24" in result.stdout:
            logger.info("‚úÖ DNS: terradatalab.org ‚Üí 34.228.167.24")
            return True
        else:
            logger.error("‚ùå DNS –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª—Å—è –≤ 34.228.167.24")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ DNS: {e}")
        return False

def start_ffmpeg():
    """–ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg —Å –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ H.264"""
    cmd = [
        "ffmpeg",
        "-y",                              # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
        "-rtsp_transport", "tcp",          # –ù–∞–¥—ë–∂–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        "-i", RTSP_URL,                    # –ò—Å—Ç–æ—á–Ω–∏–∫
        "-vf", f"fps={FRAME_RATE},scale={RESOLUTION}",  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        "-c:v", "libx264",                # –ö–æ–¥–µ–∫ H.264
        "-preset", PRESET,                 # ultrafast = –º–µ–Ω—å—à–µ CPU
        "-tune", "zerolatency",           # –î–ª—è —Å—Ç—Ä–∏–º–∞
        "-b:v", BITRATE,                  # –ë–∏—Ç—Ä–µ–π—Ç
        "-g", "20",                       # GOP = 2x FPS
        "-keyint_min", "20",
        "-sc_threshold", "0",
        "-an",                             # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
        "-f", "flv",                       # –§–æ—Ä–º–∞—Ç –¥–ª—è RTMP
        FFMPEG_SERVER                      # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    ]

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ ffmpeg...")
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

    try:
        proc = subprocess.Popen(
            cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            bufsize=1
        )
        return proc
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ffmpeg: {e}")
        return None

def monitor_ffmpeg(proc):
    """–ß–∏—Ç–∞–µ–º stderr ffmpeg"""
    while True:
        line = proc.stderr.readline()
        if not line:
            break
        line = line.strip()
        if "frame=" in line and "fps=" in line:
            logger.info(f"üìä {line}")
        elif any(kw in line.lower() for kw in ["error", "failed", "invalid"]):
            logger.error(f"‚ùå FFmpeg: {line}")

def main():
    logger.info("üü¢ –°—Ç—Ä–∏–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üåç –°—Ç—Ä–∏–º –≤: {FFMPEG_SERVER}")

    while running:
        if not check_network():
            time.sleep(10)
            continue

        proc = start_ffmpeg()
        if not proc:
            time.sleep(5)
            continue

        logger.info(f"mPid: {proc.pid}")

        try:
            while running:
                if proc.poll() is not None:
                    code = proc.returncode
                    logger.error(f"üí• FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {code}")
                    break
                monitor_ffmpeg(proc)
                time.sleep(0.5)

        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

        finally:
            if proc.poll() is None:
                logger.info("‚úã –ó–∞–≤–µ—Ä—à–∞–µ–º ffmpeg...")
                proc.terminate()
                try:
                    proc.wait(timeout=3)
                except:
                    proc.kill()

        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
        time.sleep(5)

    logger.info("üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        sys.exit(0)

